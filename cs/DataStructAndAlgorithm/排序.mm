<map version="1.0.1">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1574399766670" ID="ID_706456281" MODIFIED="1574399772365" TEXT="&#x6392;&#x5e8f;">
<node CREATED="1574399802295" ID="ID_1236966726" MODIFIED="1574399810363" POSITION="right" TEXT="&#x4ea4;&#x6362;&#x6392;&#x5e8f;">
<node CREATED="1574399812558" ID="ID_32668894" MODIFIED="1574399817371" TEXT="&#x5192;&#x6ce1;&#x6392;&#x5e8f;">
<node CREATED="1574399819562" ID="ID_1778197554" MODIFIED="1574438948075" TEXT="&#x76f8;&#x90bb;&#x4e24;&#x4e2a;&#x5143;&#x7d20;&#x6bd4;&#x8f83;&#xff0c;&#x4f9d;&#x6b64;&#x4ea4;&#x6362;&#xff0c;&#x6bcf;&#x6b21;&#x5faa;&#x73af;&#x9009;&#x51fa;&#x4e00;&#x4e2a;&#x6700;&#x5927;/&#x5c0f;&#x503c;&#x3002;o(n^2)">
<node CREATED="1574438127920" ID="ID_1648543014" MODIFIED="1574564287784" STYLE="bubble" TEXT="func bubleSort(nums []int){&#xa;  for i := 0; i&lt; len(nums) - 1; i++{&#xa;    for j := 0; j &lt; len(nums) - i - 1; j++{&#xa;      if nums[j]&gt;nums[j+1]{&#xa;        nums[j], nums[j+1] = nums[j+1], nums[j]&#xa;      }&#xa;  }&#xa;}">
<node CREATED="1574439000503" ID="ID_641237239" MODIFIED="1574439224259" STYLE="fork" TEXT="i &#x5192;&#x6ce1;&#x6b21;&#x6570;&#xff0c;&#x4e00;&#x5171;&#x9700;&#x8981;&#x5192;len(nums)-1&#x6b21;&#xff0c;&#x56e0;&#x4e3a;&#x6700;&#x540e;&#x4e00;&#x4e2a;&#x6570;&#x4e0d;&#x9700;&#x8981;&#x5192;&#x4e86;&#x3002;&#xa;j &#x662f;&#x6bcf;&#x6b21;&#x4ece;&#x5934;&#x5f00;&#x59cb;&#x5192;&#xff0c;&#x56e0;&#x4e3a;&#x5df2;&#x7ecf;&#x5192;&#x4e86;i&#x4e2a;&#x6392;&#x597d;&#x5e8f;&#x7684;&#x653e;&#x5728;&#x6700;&#x540e;&#xff0c;&#x6240;&#x4ee5;&#x6bcf;&#x6b21;&#x5192;&#x7684;&#x8303;&#x56f4;&#x662f;[0~len-i).&#x56e0;&#x4e3a;&#x5192;&#x6ce1;&#x4e2d;&#x6709;nums[j+1],&#x6240;&#x4ee5;j&#x6700;&#x5927;&#x503c;&lt;len-i-1."/>
</node>
</node>
</node>
<node CREATED="1574399944361" ID="ID_1191477254" MODIFIED="1574399951377" TEXT="&#x5feb;&#x901f;&#x6392;&#x5e8f;">
<node CREATED="1574399954740" ID="ID_11292226" MODIFIED="1574564122579" TEXT="&#x5206;&#x6cbb;&#x6cd5;&#xff0c;&#x9009;&#x51fa;&#x4e00;&#x4e2a;pivot&#xff0c;&#x9996;&#x5c3e;&#x4e24;&#x4e2a;&#x6307;&#x9488;&#xff0c;&#x9996;&#x6307;&#x9488;&#x79fb;&#x52a8;&#x5230;&#x6bd4;pivot&#x5c0f;&#x7684;&#x5730;&#x65b9;&#xff0c;&#x5c3e;&#x6307;&#x9488;&#x79fb;&#x52a8;&#x5230;&#x6bd4;pivot&#x5c0f;&#x7684;&#x5730;&#x65b9;&#xff0c;&#x6700;&#x7ec8;&#x6bd4;pivot&#x5927;&#x7684;&#x653e;&#x53f3;&#x8fb9;&#xff0c;&#x5c0f;&#x7684;&#x653e;&#x5de6;&#x8fb9;&#x3002;&#x7ee7;&#x7eed;&#x5bf9;&#x4e24;&#x8fb9;&#x7684;&#x6570;&#x5206;&#x6cbb;&#x3002;">
<node CREATED="1574483178924" ID="ID_517513741" MODIFIED="1574566826725" STYLE="bubble" TEXT="func quickSort(nums []int)[&#xa;    partial(nums,0, len(nums)-1)&#xa;}&#xa;func partial(nums []int, low, high int){&#xa;    if low &gt;= high {return}&#xa;    pivot := nums[low]&#xa;    i,j := low, high&#xa;    for i&lt;j{&#xa;        for i&lt;j &amp;&amp; nums[j]&gt;=pivot{&#xa;            j--&#xa;        }&#xa;        if i&lt;j{&#xa;            nums[i] = nums[j]&#xa;            i++&#xa;        }&#xa;        for i&lt;j &amp;&amp; nums[i]&lt;=pivot{&#xa;            i++&#xa;        }&#xa;        if i&lt;j{&#xa;            nums[j] = nums[i]&#xa;            j--&#xa;        }&#xa;    }&#xa;    nums[i]=pivot&#xa;    partial(nums, low, i-1)&#xa;    partial(nums,i+1,high)&#xa;}">
<node CREATED="1574565228472" ID="ID_207502435" MODIFIED="1574565449785" STYLE="fork" TEXT="&#x8fd9;&#x91cc;&#x9009;&#x7684;&#x7b2c;&#x4e00;&#x4e2a;&#x503c;&#x4e3a;pivot&#xff0c;&#x56e0;&#x6b64;&#x9700;&#x8981;&#x4ece;&#x5c3e;&#x6307;&#x9488;&#x5f00;&#x59cb;&#x6bd4;&#x8f83;&#xff0c;&#x5e94;&#x4e3a;&#x9996;&#x6307;&#x9488;&#x7684;&#x503c;&#x5df2;&#x7ecf;&#x88ab;pivot&#x4fdd;&#x5b58;&#x4e86;&#xff0c;&#x5982;&#x679c;&#x9996;&#x6307;&#x9488;&#x7684;&#x503c;&#x88ab;&#x8986;&#x76d6;&#xff0c;&#x540e;&#x9762;&#x53ef;&#x4ee5;&#x7528;pivot&#x6765;&#x6062;&#x590d;&#x3002;&#xff08;&#x5982;&#x679c;&#x6700;&#x540e;&#x4e00;&#x4e2a;&#x503c;&#x4e3a;pivot&#xff0c;&#x90a3;&#x4e48;&#x9700;&#x8981;&#x4ece;&#x9996;&#x6307;&#x9488;&#x5f00;&#x59cb;&#x6bd4;&#x8f83;&#xff1b;&#x5982;&#x679c;&#x9009;&#x4e2d;&#x95f4;&#x503c;&#x4e3a;pivot&#xff0c;&#x90a3;&#x4e48;&#x5c31;&#x4e0d;&#x80fd;&#x76f4;&#x63a5;&#x8d4b;&#x503c;&#x4e86;&#xff0c;&#x9700;&#x8981;&#x901a;&#x8fc7;&#x9996;&#x5c3e;&#x4e24;&#x4e2a;&#x7684;&#x503c;&#x4ea4;&#x6362;&#x3002;&#xff09;"/>
</node>
</node>
</node>
</node>
<node CREATED="1574604365947" ID="ID_1727366338" MODIFIED="1574604374679" POSITION="right" TEXT="&#x63d2;&#x5165;&#x6392;&#x5e8f;">
<node CREATED="1574604385524" ID="ID_1146922234" MODIFIED="1574604391579" TEXT="&#x7b80;&#x5355;&#x63d2;&#x5165;&#x6392;&#x5e8f;">
<node CREATED="1574604542840" ID="ID_1016893489" MODIFIED="1574604701778" TEXT="&#x5047;&#x5b9a;&#x7b2c;&#x4e00;&#x4e2a;&#x6570;&#x5df2;&#x7ecf;&#x6392;&#x597d;&#x5e8f;&#xff0c;&#x540e;&#x9762;&#x7684;&#x6bcf;&#x4e2a;&#x6570;&#x90fd;&#x4f9d;&#x6b21;&#x548c;&#x524d;&#x9762;&#x7684;&#x6570;&#x6bd4;&#x8f83;&#xff0c;&#x5982;&#x679c;&#x6bd4;&#x524d;&#x9762;&#x7684;&#x6570;&#x5c0f;&#xff0c;&#x524d;&#x9762;&#x7684;&#x6570;&#x4f9d;&#x6b64;&#x540e;&#x79fb;&#xff0c;&#x5c06;&#x8be5;&#x6570;&#x63d2;&#x5165;&#x5230;&#x5408;&#x9002;&#x4f4d;&#x7f6e;">
<attribute_layout NAME_WIDTH="33" VALUE_WIDTH="33"/>
<node CREATED="1574605038006" ID="ID_1263288753" MODIFIED="1574605827208" STYLE="bubble" TEXT="func insertSort(nums []int)  {&#xa;    for i := 1; i&lt; len(nums); i++ {&#xa;        preIdx := i-1&#xa;        curVal := nums[i]&#xa;        for ;preIdx &gt;= 0 &amp;&amp; curVal &lt; nums[preIdx]; preIdx--{&#xa;            nums[preIdx+1] = nums[preIdx]&#xa;        }&#xa;        nums[preIdx+1] = curVal&#xa;    }&#xa;}">
<node CREATED="1574606998717" ID="ID_1102369168" MODIFIED="1574607075048" STYLE="fork" TEXT="i&#x662f;&#x6307;&#x524d;&#x9762;&#x5df2;&#x7ecf;&#x6392;&#x597d;&#x5e8f;&#x7684;&#x6570;&#x7684;&#x4e2a;&#x6570;&#xff0c;&#x7531;&#x4e8e;&#x5047;&#x8bbe;&#x7b2c;0&#x4e2a;&#x6570;&#x5df2;&#x7ecf;&#x6392;&#x597d;&#xff0c;&#x6240;&#x4ee5;i&#x4ece;1&#x5f00;&#x59cb;"/>
</node>
</node>
</node>
<node CREATED="1574604394054" ID="ID_263354186" MODIFIED="1574604398846" TEXT="&#x5e0c;&#x5c14;&#x6392;&#x5e8f;">
<node CREATED="1574605751417" ID="ID_1125005802" MODIFIED="1574610159748" TEXT="&#x57fa;&#x4e8e;&#x7b80;&#x5355;&#x63d2;&#x5165;&#x6392;&#x5e8f;&#x7684;&#x6539;&#x8fdb;&#x7248;&#x672c;&#x3002;&#x662f;&#x7b2c;&#x4e00;&#x4e2a;&#x7a81;&#x7834;o(n^2)&#x7684;&#x6392;&#x5e8f;&#x7b97;&#x6cd5;.&#x5e0c;&#x5c14;&#x6392;&#x5e8f;&#x662f;&#x7f29;&#x5c0f;&#x589e;&#x91cf;&#x6392;&#x5e8f;&#x3002;&#x6bcf;&#x6b21;&#x53d6;&#x4e00;&#x4e2a;&#x589e;&#x91cf;gap&#xff0c;&#x628a;&#x6570;&#x636e;&#x5206;&#x9694;&#x6210;gap&#x4e2a;&#x7ec4;&#xff0c;&#x6bcf;&#x4e2a;&#x7ec4;&#x4e2d;&#x7684;&#x6570;&#x636e;&#x4e0e;&#x76f8;&#x90bb;&#x6570;&#x636e;&#x95f4;&#x9694;&#x4e3a;gap&#x3002;&#x5bf9;&#x8be5;gap&#x4e2a;&#x7ec4;&#x7684;&#x6570;&#x636e;&#x8fdb;&#x884c;&#x7b80;&#x5355;&#x63d2;&#x5165;&#x6392;&#x5e8f;&#x3002;&#x5728;&#x5c06;gap&#x7f29;&#x5c0f;&#x8303;&#x56f4;&#xff0c;&#x76f4;&#x81f3;&#x6240;&#x6709;&#x6570;&#x636e;&#x5206;&#x5230;1&#x4e2a;&#x7ec4;&#x5185;&#x8fdb;&#x884c;&#x7b80;&#x5355;&#x63d2;&#x5165;&#x6392;&#x5e8f;&#x3002;&#x4f18;&#x70b9;&#xff1a;&#x6d88;&#x9664;&#x591a;&#x4e2a;&#x5143;&#x7d20;&#x7684;&#x4ea4;&#x6362;&#x3002;o(n^1.5)">
<node CREATED="1574605788849" ID="ID_1672327831" MODIFIED="1574605846423" STYLE="bubble" TEXT="func shellSort(nums []int)  {&#xa;    for gap := len(nums) / 2; gap &gt; 0; gap = gap / 2 {&#xa;        for i := gap; i &lt; len(nums); i++ {&#xa;            preIdx := i - gap;&#xa;            curVal := nums[i]&#xa;            for ; preIdx &gt;= 0 &amp;&amp; curVal &lt; nums[preIdx]; preIdx -= gap{&#xa;                nums[preIdx + gap] = nums[preIdx]&#xa;            }&#xa;            nums[preIdx + gap] = curVal&#xa;        }&#xa;    }&#xa;}">
<node CREATED="1574607309810" ID="ID_145601196" MODIFIED="1574607491818" TEXT="x0, x1, x2, x3, x4, x5, x6, x7&#xa;gap:= 4&#xa;x0  --------- x4&#xa;      x1---------- x5&#xa;            x2-----------x6&#xa;                   x3-----------x7&#xa;gap = 2&#xa;x0-----x2&#xa;    x1------x3&#xa;...."/>
</node>
</node>
</node>
</node>
<node CREATED="1574610074690" ID="ID_1111967382" MODIFIED="1574610079590" POSITION="right" TEXT="&#x9009;&#x62e9;&#x6392;&#x5e8f;">
<node CREATED="1574610086453" ID="ID_830249142" MODIFIED="1574610092363" TEXT="&#x7b80;&#x5355;&#x6392;&#x5e8f;">
<node CREATED="1574610095860" ID="ID_1798388955" MODIFIED="1574610135418" TEXT="&#x6bcf;&#x6b21;&#x5728;&#x6ca1;&#x6392;&#x597d;&#x5e8f;&#x7684;&#x90e8;&#x5206;&#x9009;&#x51fa;&#x4e00;&#x4e2a;&#x6700;&#x5c0f;&#x7684;&#x6570;&#xff0c;&#x653e;&#x5728;&#x5df2;&#x6392;&#x597d;&#x5e8f;&#x90e8;&#x5206;&#x7684;&#x540e;&#x9762;&#x3002;">
<node CREATED="1574610447479" ID="ID_1020220041" MODIFIED="1574610472688" STYLE="bubble" TEXT="func selectSort(nums []int)  {&#xa;    for i := 0; i &lt; len(nums) - 1; i++ {&#xa;        minIdx := i&#xa;        for j := i+1; j &lt; len(nums); j++ {&#xa;            if nums[minIdx] &gt; nums[j] {&#xa;                minIdx = j&#xa;            }&#xa;        }&#xa;        nums[i], nums[minIdx] = nums[minIdx], nums[i]&#xa;    } &#xa;}"/>
</node>
</node>
<node CREATED="1574610486043" ID="ID_236658710" MODIFIED="1574610494226" TEXT="&#x5806;&#x6392;&#x5e8f;">
<node CREATED="1574746256948" ID="ID_1745388139" MODIFIED="1574746458021" TEXT="&#x8282;&#x70b9;x&#x7684;&#x5de6;&#x5b50;&#x8282;&#x70b9;2x+1&#xff0c;&#x53f3;&#x5b50;&#x8282;&#x70b9;2x+2.&#x4ece;&#x5012;&#x6570;&#x7b2c;&#x4e00;&#x4e2a;&#x975e;&#x53f6;&#x5b50;&#x8282;&#x70b9;&#x5f00;&#x59cb;&#xff0c;&#x4f9d;&#x6b64;&#x5c06;&#x6700;&#x5927;&#x503c;&#x653e;&#x5728;&#x7236;&#x8282;&#x70b9;&#x4e0a;&#x3002;&#x6700;&#x7ec8;&#x6839;&#x8282;&#x70b9;&#x662f;&#x6700;&#x5927;&#x503c;&#x3002;&#x5c06;&#x6700;&#x5927;&#x503c;&#x4e0e;&#x6700;&#x540e;&#x4e00;&#x4e2a;&#x503c;&#x4ea4;&#x6362;&#xff0c;&#x90a3;&#x4e48;&#x6700;&#x540e;&#x4e00;&#x4e2a;&#x503c;&#x5c31;&#x662f;&#x5f53;&#x524d;&#x6700;&#x5927;&#x503c;&#x3002;&#x7136;&#x540e;&#x5bf9;&#x5269;&#x4e0b;&#x7684;&#x503c;&#x518d;&#x6b21;&#x5806;&#x6392;&#x5e8f;&#x3002;">
<node CREATED="1574746436179" ID="ID_1825771300" MODIFIED="1574746489923" STYLE="bubble" TEXT="func heapSort(nums []int) []int {&#xa;&#x9;for i := len(nums)/2 - 1; i &gt;= 0; i-- { // &#x4ece;&#x5012;&#x6570;&#x7b2c;&#x4e00;&#x4e2a;&#x975e;&#x53f6;&#x5b50;&#x8282;&#x70b9;&#xff08;&#x7236;&#x8282;&#x70b9;&#xff09;&#x5f00;&#x59cb;&#xff0c;&#x6bcf;&#x6b21;&#x5c06;&#x6700;&#x5927;&#x503c;&#x653e;&#x5728;&#x6240;&#x6709;&#x7236;&#x8282;&#x70b9;&#x4e0a;&#xa;&#x9;&#x9;heaplify(nums, i, len(nums))&#xa;&#x9;}&#xa;&#xa;&#x9;for i := len(nums) - 1; i &gt; 0; i-- { // &#x6bcf;&#x6b21;&#x5c06;&#x5806;&#x7684;&#x6700;&#x5927;&#x503c;&#x653e;&#x5728;&#x6700;&#x540e;&#xff0c;&#x91cd;&#x65b0;&#x6784;&#x9020;&#x65b0;&#x7684;&#x5806;&#xa;&#x9;&#x9;nums[0], nums[i] = nums[i], nums[0]&#xa;&#x9;&#x9;heaplify(nums, 0, i)&#xa;&#x9;}&#xa;&#x9;return nums&#xa;}&#xa;func heaplify(nums []int, start, end int) { // &#x5c06;&#x6700;&#x5927;&#x503c;&#x653e;&#x5728;start&#x4f4d;&#x7f6e;&#x4e0a;&#xa;&#x9;curIdx := start&#xa;&#x9;for curIdx &lt; end {&#xa;&#x9;&#x9;left := 2 * curIdx + 1&#xa;&#x9;&#x9;right := 2 * curIdx + 2&#xa;&#x9;&#x9;if left &lt; end &amp;&amp; nums[left] &gt; nums[curIdx] &amp;&amp; (right &gt;= end || nums[left] &gt; nums[right]) {&#xa;&#x9;&#x9;&#x9;nums[curIdx], nums[left] = nums[left], nums[curIdx]&#xa;&#x9;&#x9;&#x9;curIdx = left&#xa;&#x9;&#x9;} else if right &lt; end &amp;&amp; nums[right] &gt; nums[curIdx] {&#xa;&#x9;&#x9;&#x9;nums[curIdx], nums[right] = nums[right], nums[curIdx]&#xa;&#x9;&#x9;&#x9;curIdx = right&#xa;&#x9;&#x9;}else {&#xa;&#x9;&#x9;&#x9;break&#xa;&#x9;&#x9;}&#xa;&#xa;&#x9;}&#xa;}"/>
</node>
</node>
</node>
</node>
</map>
